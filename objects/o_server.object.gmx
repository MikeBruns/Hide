<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup the server

// CONSTANTS
TEST = 0;
KEY = 1;
MOUSE_X = 2;
MOUSE_Y = 3;


// Variables
max_clients = 3; // Only 3 players are in game
default_port = 6510;
port = default_port;
type = network_socket_tcp;
IP = -1; // Get the IP of the server to send to user, no idea how to do this atm
socket_list = ds_list_create();

server_socket = network_create_server(type, port, max_clients);

if server_socket &lt; 0{
    //connection error
    while(server_socket &lt; 0 and port &lt; default_port + 1000){
        port++;
        server_socket = network_create_server(type, port, max_clients);
    }
}

if server_socket &gt;= 0{
    //Server connected, run the code
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var t_buffer = buffer_create(256, buffer_grow, 1);

buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u16, TEST);
buffer_write(t_buffer, buffer_string, "SWAG");
// More data

for(var i = 0; i &lt; ds_list_size(socket_list); i++){
    network_send_packet(ds_list_find_value(socket_list, i), t_buffer, buffer_tell(t_buffer));
}
buffer_delete(t_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect client connections

var n_id = ds_map_find_value(async_load, "id");         //get the id of the socket receiving the data
if n_id == server_socket {

    var t = ds_map_find_value(async_load, "type"); 
    
    switch(t){                            //get the type of network event
        case network_type_connect:                               //get the socket id of the connection
            var sock = ds_map_find_value(async_load, "socket"); //and store it in a variable
            ds_list_add(socket_list, sock);                      //then write it to a ds_list for future reference
            break;
        case network_type_disconnect:
            var sock = ds_map_find_value(async_load, "socket");
            ds_map_delete(socket_list, sock);
            break;
        case network_type_data:
            //Data handling here
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recieve data

var n_id = ds_map_find_value(async_load, "id");
if server_socket == n_id{
    var t_buffer = ds_map_find_value(async_load, "buffer"); 
    if(t_buffer &gt;= 0){
        var cmd_type = buffer_read(t_buffer, buffer_u16 );
        var inst = ds_map_find_value(socket_list, sock );
        switch(cmd_type){
            case KEY:
                //A key has been pressed so read the keypress data from the buffer
            break;
            case TEST:
                show_debug_message("Packet received");
                show_debug_message(buffer_read(t_buffer, buffer_string));
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
